name: 'Release'
author: 'Alexey Chekulaev'
description: 'generate new version, upload to s3, push tags and send to gitops'
branding:
  icon: package
  color: green
inputs:
  aws-account:
    description: 'AWS account to publish artifacts to. Not needed if there are no artifacts, just git tag'
    required: false
  aws-region:
    description: 'AWS region'
    required: false
  aws-role:
    description: 'IAM role to assume to publish, ex. `/ci/publisher`'
    required: false
  aws-codeartifact-domain:
    description: 'CodeArtifact domain name, ex. `mycompany`'
    required: false
  aws-codeartifact-repository:
    description: 'CodeArtifact repository name, ex. `maven`'
    required: false
  aws-codeartifact-maven:
    description: 'If true, then publish maven artifacts to AWS CodeArtifact'
    required: false
  aws-ecr:
    description: 'If true, then push docker image to ECR'
    required: false
  aws-s3-bucket:
    description: 'Required if uploading to S3 (i.e. s3/ directory exists)'
    required: false
  aws-s3-dir:
    description: 'Allows to specify S3 bucket directory to upload artifacts to. By default just place in `bucket/{repo-name}/{version}/*`'
    required: false
  changelog-file:
    description: 'Changelog file path. Pass empty string to disable changelog generation'
    required: false
    default: 'CHANGELOG.md'
  changelog-title:
    description: 'Title of the changelog file (first line of the file)'
    required: false
    default: '# Changelog'
  dev-branch-prefix:
    description: 'Allows to enforce branch prefix for dev-releases, this help to write auto-disposal rules. Empty string disables enforcement'
    required: false
    default: 'feature/'
  dev-release:
    description: 'Allows to create temporary named release, mainly for dev testing. Implementation is different for all supported artifact types'
    required: false
    default: 'false'
  dev-release-push:
    description: 'Git push files changed during dev-release: update version in pom.xml, pyproject.toml and files modified by pre-publish-script'
    required: false
    default: 'false'
  floating-tags:
    description: 'When next version to be released is 1.2.4, then also release 1, 1.2 and latest. Not desired for public terraform modules'
    required: false
    default: 'true'
  java-version:
    description: 'Java version to use with aws-codeartifact-maven'
    required: false
    default: '21'
  node-version:
    description: 'Node.js version to publish npm packages, default is 22 because it is highest pre-cached in Ubuntu 24'
    required: false
    default: '22'
  npm-extra-deps:
    description: 'Additional semantic-release npm dependencies, needed to use non-default commit analyzer preset'
    required: false
  npm-visibility:
    description: 'Used together with env variable `NPM_TOKEN` to publish npm package. Specifies package visibility: public or private'
    required: false
    default: 'public'
  pre-publish-script:
    description: 'sh script that allows to update version in custom file(s), not only files governed by build tool (pom.xml, package.json, etc)'
    required: false
  release-branches:
    description: 'semantic-release "branches" configuration'
    required: false
  release-channel:
    description: 'Repeat `.releaserc.json` `channel` behavior when set `version` explicitly'
    required: false
  release-gh:
    description: 'If true, then create a GitHub release with the same name as the tag'
    required: false
    default: 'true'
  release-plugins:
    description: 'semantic-release plugins configuration'
    required: false
  summary:
    description: 'If true, then print summary to the GitHub Actions summary page'
    required: false
    default: '### Released ${version}'
  tag-format:
    description: 'By-default tag (version) has format `v1.0.0`. Use `${version}` to remove `v` prefix'
    required: false
  version:
    description: 'Explicit version to use instead of auto-generation'
    required: false
  version-bump:
    description: 'Allows to bump a version w/o semantic commits'
    required: false

runs:
  using: "composite"
  steps:

## Phase 1.1 - Validate secrets (tokens) passed via env variables

    - name: Validate trigger event
      shell: bash
      run: |
        # Validate trigger event
        if [[ "${{ github.event_name }}" == "pull_request" || "${{ github.event_name }}" == "pull_request_target" ]]; then
          echo "Error: agilecustoms/release doesn't support on: pull_request/pull_request_target as a trigger" >&2; exit 1
        fi

    - name: Validate GH token
      if: inputs.release-gh == 'true' && inputs.dev-release == 'false' && !env.GH_TOKEN
      shell: bash
      run: |
        echo "Error: env: GH_TOKEN is required to create GH release, you can pass $ {{ github.token }} or PAT" >&2; exit 1

    - name: Validate npmjs token
      if: env.NPM_TOKEN && inputs.dev-release == 'true'
      shell: bash
      run: |
        echo "Error: npmjs does not support dev-release (version inferred from branch name), npmjs only supports semver" >&2; exit 1

    - name: Validate npm visibility
      if : env.NPM_TOKEN && ! (inputs.npm-visibility == 'public' || inputs.npm-visibility == 'private')
      shell: bash
      run: |
        echo "Error: npm-visibility must be either 'public' or 'private'" >&2; exit 1

## Phase 1.2 - Validate the rest of inputs, infer defaults

    - name: Init
      id: init
      shell: bash
      run: |
        # Init
        # Validate version: explicit version cannot be used with dev-release=true
        if [ -n "${{ inputs.version }}" ] && [ "${{ inputs.dev-release }}" = "true" ]; then
          echo "Error: explicit version cannot be used with dev-release=true" >&2
          exit 1
        fi
        # GITHUB_REPOSITORY has a format of 'company/service'
        service=$(echo "${GITHUB_REPOSITORY}" | awk -F'/' '{print $2}')
        echo "service=$service" >> $GITHUB_OUTPUT
        
        if [ "${{ inputs.dev-release }}" = "true" ] && [ -n "${{ inputs.dev-branch-prefix }}" ]; then
          branch="${GITHUB_REF#refs/heads/}"
          if [[ "$branch" != "${{ inputs.dev-branch-prefix }}"* ]]; then
            echo "Error: current branch '$branch' must start with '${{ inputs.dev-branch-prefix }}' when dev-release is true" >&2
            exit 1
          fi
        fi
        
        if [ -d s3 ]; then
          echo "aws_s3=true" >> $GITHUB_OUTPUT
        fi
        
        if [ -d s3 ] || [ "${{ inputs.aws-ecr }}" = "true" ] || [ "${{ inputs.aws-codeartifact-maven }}" = "true" ]; then
          if [ -z "${{ inputs.aws-account }}" ] || [ -z "${{ inputs.aws-region }}" ] || [ -z "${{ inputs.aws-role }}" ]; then
            echo "Error: aws-account, aws-region, and aws-role must all be provided" >&2
            exit 1
          fi
        fi

        if [ "${{ inputs.aws-codeartifact-maven }}" = "true" ]; then
          if [ -z "${{ inputs.aws-codeartifact-domain }}" ] || [ -z "${{ inputs.aws-codeartifact-repository }}" ]; then
            echo "Error: aws-codeartifact-domain and aws-codeartifact-repository must be provided when aws-codeartifact-maven is true" >&2
            exit 1
          fi
        fi
        
        if [ -d s3 ] && [ -z "${{ inputs.aws-s3-bucket }}" ] ; then
          echo "Error: aws-s3-bucket must be provided when using S3" >&2
          exit 1
        fi

## Phase 2 - Release generation

    # by default (job permissions: contents: write) .git/config already pre-configured with a ${{ github.token }}
    # alternatively user may want to use an explicit PAT, then need to configure git to use it.
    # Besides 'git push', release_gen _probes_ git push, that's why it is in front of release_gen
    - name: Git authorization
      if: env.GH_TOKEN
      shell: bash
      run: |
        # Git authorization
        creds=$(echo -n "x-access-token:${GH_TOKEN}" | base64 -w 0)
        git config http.https://github.com/.extraheader "AUTHORIZATION: basic $creds"

    # CWD is /home/runner/work/release/release
    # generate a new version, release notes (available in file outputs.notes_file) and also update file CHANGELOG.md
    - name: Release generation
      id: release_gen
      if: inputs.dev-release == 'false'
      uses: agilecustoms/release-gen@v2.13.1
      with:
        changelog_file: ${{ inputs.changelog-file }}
        changelog_title: ${{ inputs.changelog-title }}
        floating_tags: ${{ inputs.floating-tags }}
        npm_extra_deps: ${{ inputs.npm-extra-deps }}
        release_branches: ${{ inputs.release-branches }}
        release_channel: ${{ inputs.release-channel }}
        release_plugins: ${{ inputs.release-plugins }}
        tag_format: ${{ inputs.tag-format }}
        version: ${{ inputs.version }}
        version_bump: ${{ inputs.version-bump }}

    - name: Finalize version and tags
      id: version
      shell: bash
      run: |
        # Finalize version and tags
        if [ "${{ inputs.dev-release }}" = "true" ]; then
          version="$(echo "${GITHUB_REF#refs/heads/}" | tr '/' '-')" # refs/heads/feature/abc -> feature-abc
          git_tags="$version"
          tags="$version"
        else
          version="${{ steps.release_gen.outputs.version }}"
          git_tags="${{ steps.release_gen.outputs.git_tags }}"
          tags="${{ steps.release_gen.outputs.tags }}"
        fi
        
        echo "version=$version" >> $GITHUB_OUTPUT
        echo "git_tags=$git_tags" >> $GITHUB_OUTPUT
        echo "tags=$tags" >> $GITHUB_OUTPUT

## Phase 3 - Log in AWS

    - name: Log in AWS
      if: steps.init.outputs.aws_s3 || inputs.aws-ecr || inputs.aws-codeartifact-maven
      id: login-aws
      uses: aws-actions/configure-aws-credentials@v4.2.1 # v4 doesn't point to the most recent 4.x.x :(
      with:
        aws-region: ${{ inputs.aws-region }}
        role-to-assume: arn:aws:iam::${{ inputs.aws-account }}:role/${{ inputs.aws-role }}
        output-credentials: true

    - name: Log in Amazon ECR
      if: inputs.aws-ecr
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2 # outputs.registry = {acc_id}.dkr.ecr.{region}.amazonaws.com

## Phase 4 - Prepare: mainly bump versions in language-specific files

    - name: Setup Java
      if: hashFiles('pom.xml')
      uses: agilecustoms/setup-maven-codeartifact@v1.5.7
      with:
        aws-account: ${{ inputs.aws-account }}
        aws-region: ${{ inputs.aws-region }}
        aws-role: ${{ inputs.aws-role }}
        aws-codeartifact-domain: ${{ inputs.aws-codeartifact-domain }}
        aws-codeartifact-repository: ${{ inputs.aws-codeartifact-repository }}
        aws-login: false # we already logged in AWS in a previous step
        java-version: ${{ inputs.java-version }}

    - name: Update version in pom.xml
      if: hashFiles('pom.xml')
      shell: bash
      run: |
        # Update version in pom.xml
        mvn --no-transfer-progress versions:set -DnewVersion=${{ steps.version.outputs.version }} -DoldVersion=* -DgroupId=* -DartifactId=*

    - name: Setup Node
      if: hashFiles('package.json') && inputs.dev-release == 'false'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        registry-url: 'https://registry.npmjs.org'

    - name: Update version in package.json
      if: hashFiles('package.json') && inputs.dev-release == 'false'
      shell: bash
      run: |
        # Update version in package.json
        npm version ${{ steps.version.outputs.version }} --no-git-tag-version

    - name: Setup Python
      if: hashFiles('pyproject.toml')
      uses: actions/setup-python@v5

    - name: Update version in pyproject.toml
      if: hashFiles('pyproject.toml')
      shell: bash
      run: |
        # Update version in pyproject.toml
        pipx install poetry
        poetry version ${{ steps.version.outputs.version }}

    - name: Pre-publish script
      if: inputs.pre-publish-script
      shell: bash
      run: |
        # Pre-publish script
        version=${{ steps.version.outputs.version }} && ${{ inputs.pre-publish-script }}

## Phase 5 - Publish artifacts

    - name: Publish to S3
      if: steps.init.outputs.aws_s3
      uses: agilecustoms/publish-s3@v1.0.0
      with:
        access-key-id: ${{ steps.login-aws.outputs.aws-access-key-id }}
        secret-access-key: ${{ steps.login-aws.outputs.aws-secret-access-key }}
        session-token: ${{ steps.login-aws.outputs.aws-session-token }}
        bucket: ${{ inputs.aws-s3-bucket }}
        bucket-dir: ${{ inputs.aws-s3-dir }}
        versions: ${{ steps.version.outputs.tags }}
        dev-release: ${{ inputs.dev-release }}

    - name: Push Docker image in ECR
      if: inputs.aws-ecr
      shell: bash
      run: |
        # Push Docker image in ECR
        service="${{ steps.init.outputs.service }}"
        ecr_image=${{ steps.login-ecr.outputs.registry }}/$service
        tags=$(echo "${{ steps.version.outputs.tags }}" | sed 's/[^ ]\+/imageTag=&/g')
        AWS_PAGER="" aws ecr batch-delete-image --repository-name $service --image-ids $tags || true
        tags="${{ steps.version.outputs.tags }}"
        for tag in $tags; do
          docker tag $service $ecr_image:$tag
        done
        docker push --all-tags $ecr_image

    # maven.main.skip=true (from Maven 3.9.0) to skip main sources compilation
    # maven.test.skip=true skips tests compilation and running (-DskipTests just skips running)
    # it does repackage though! (this is for good, bcz pom versions changed)
    # TODO: verify phase still run in build and release jobs
    # TODO: checkstyle and enforcer still run in both jobs
    - name: Publish maven to CodeArtifact
      if: inputs.aws-codeartifact-maven
      shell: bash
      run: |
        # Publish maven to CodeArtifact
        set +e
        output=$(mvn --no-transfer-progress deploy -Dmaven.main.skip=true -Dmaven.test.skip=true 2>&1)
        error_code=$?
        echo "$output"
        if [ $error_code -ne 0 ] && [ "${{ github.run_attempt }}" != "1" ]; then
          if echo "$output" | grep -q "status code: 409"; then
            echo "Ignore error 'version already exist' for run attempt ${{ github.run_attempt }}"
            exit 0
          fi
        fi
        exit $error_code

    # get namespace from package.json: "name": "@company/my-package", then find mapping namespace => npm repo in .npmrc file
    # since there is no .npmrc file, do publish in npmjs.com npm registry
    - name: Publish in npmjs
      if: env.NPM_TOKEN
      shell: bash
      run: |
        # Publish in npmjs
        set +e
        output=$(npm publish --access ${{ inputs.npm-visibility }} --tag ${{ steps.release_gen.outputs.channel }} 2>&1)
        error_code=$?
        echo "$output"
        if [ $error_code -ne 0 ] && [ "${{ github.run_attempt }}" != "1" ]; then
          if echo "$output" | grep -q "You cannot publish over the previously published versions"; then
            echo "Ignore error 'version already exist' for run attempt ${{ github.run_attempt }}"
            exit 0
          fi
        fi
        exit $error_code
      env:
        NODE_AUTH_TOKEN: ${{ env.NPM_TOKEN }}

## Phase 6 - Git push

#    - name: Error to test publish idempotency
#      shell: bash
#      run: |
#        echo "intentional error" >&2
#        exit 1

    - name: Git push
      if: inputs.dev-release == 'false'
      shell: bash
      run: |
        # Git push
        # fix any permission issues from earlier steps (npm version can create files with root permissions)
        sudo chown -R "$(id -un):$(id -gn)" .
        
        # stage files that might be modified/deleted by previous steps (ignore new files)
        git add -u
        # one legitime new file is CHANGELOG.md, which is created by release-gen step
        [ -f "${{ inputs.changelog-file }}" ] && git add "${{ inputs.changelog-file }}"
        if ! git diff --cached --quiet; then
          git status --porcelain
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git commit -m "Release version ${{ steps.version.outputs.version }} [skip ci]"
        else
          echo "No changes to commit."
        fi
        
        git tag -d ${{ steps.version.outputs.git_tags }} 2>/dev/null || true
        
        tags="${{ steps.version.outputs.git_tags }}"
        for tag in $tags; do
          git tag "$tag"
        done
        
        # turn "v1.2.3 v1.2 v1 channel" into "refs/tags/v1.2.3 refs/tags/v1.2 refs/tags/v1 refs/tags/channel"
        refs=$(echo "${{ steps.version.outputs.git_tags }}" |  sed 's/[^ ]\+/refs\/tags\/&/g')
        
        if [ -z "${{ inputs.version }}" ] && [ "${{ steps.release_gen.outputs.prerelease }}" = "true" ]; then
          git notes --ref semantic-release add -f -m '{"channels":["${{ steps.release_gen.outputs.channel }}"]}'
          refs="$refs refs/notes/semantic-release"
        fi
        
        # push changes along with tags atomically (use --force to overwrite old tags)
        git push --atomic origin ${{ github.ref_name }} $refs --force

    - name: Git push dev-release
      if: inputs.dev-release == 'true' && inputs.dev-release-push == 'true'
      shell: bash
      run: |
        # Git push dev-release
        sudo chown -R "$(id -un):$(id -gn)" .
        git add -u
        if ! git diff --cached --quiet; then
          git status --porcelain
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git commit -m "Dev Release [skip ci]"
          git push origin ${{ github.ref_name }}
        else
          echo "No changes to commit."
        fi

## Phase 7 - GitHub Release

    # standard --generate-notes just add one line "**Full Changelog**: https://github.com/agilecustoms/{repo}/compare/v0.1.3...v0.1.4"
    - name: GitHub Release
      if: inputs.dev-release == 'false' && inputs.release-gh == 'true' && steps.release_gen.outputs.notes_tmp_file
      shell: bash
      run: |
        # GitHub Release
        gh release create ${{ steps.version.outputs.version }} --notes-file ${{ steps.release_gen.outputs.notes_tmp_file }}

## Phase 8 - Print summary

    - name: Summary
      if: inputs.summary && inputs.dev-release == 'false'
      shell: bash
      run: |
        # Summary
        version="${{ steps.version.outputs.version }}"
        summary="${{ inputs.summary }}"
        summary=$(eval echo "\"$summary\"")
        echo "$summary" >> $GITHUB_STEP_SUMMARY

outputs:
  version:
    description: "Newly released version"
    value: ${{ steps.version.outputs.version }}
